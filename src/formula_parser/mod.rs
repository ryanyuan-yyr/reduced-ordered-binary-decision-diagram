//! A parser for logic formula.
//! The priority for operators are
//! 1. `!`
//! 2. `&`
//! 3. `|`
//! 4. `->`, `<->`
pub use crate::BinaryOperation;
pub use crate::Operation;
pub use crate::UnaryOperation;

/// The module `grammar` is an LR(1) parser for propositional logic formula.
/// This is supported by crate [`lalrpop`](https://github.com/lalrpop/lalrpop). The hand-written CFG is in file [grammar.lalrpop](src/formula_parser/grammar.lalrpop). The file [grammar.rs](src/formula_parser/grammar.rs) is generated by `lalrpop`.
mod grammar;

#[derive(Debug)]
pub enum ParserNode<T> {
    Unary(UnaryOperation, Box<ParserNode<T>>),
    Binary(BinaryOperation, (Box<ParserNode<T>>, Box<ParserNode<T>>)),
    Variable(T),
    Leaf(bool),
}

pub fn formula_parse<'input>(
    formula: &'input str,
) -> Result<
    ParserNode<String>,
    lalrpop_util::ParseError<usize, lalrpop_util::lexer::Token<'input>, &'static str>,
> {
    grammar::FormulaParser::new().parse(formula)
}

#[test]
fn parse() {
    println!("{:?}", formula_parse("(a->b)&c").unwrap());
}
